//video: http://screencast.com/t/CCSLcDfBXKbK

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/adc.h"

int main(void) {
	
	//variables
	int hundreds, tens, ones;

	//temperature variables
	uint32_t ui32ADC0Value[4];			//will store 4 values from FIFO when using sequencer 1
	volatile uint32_t ui32TempAvg;		//stores average of 4 sampled values
	volatile uint32_t ui32TempValueC;	//stores temperature in Celsius
	volatile uint32_t ui32TempValueF;	//stores temperature in Fahrenheit


	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ); //setup system clock 50 MHz

    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0); //enable UART Port
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); //enable port A
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);	//Enable ADC0

    //configure ADC Sequencer 1
	ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);	//set sequencer 1 to trigger with CPU
	ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);			//configure step 0 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);			//configure sequencer step 1 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);			//configure sequencer step 2 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END); //configure sequencer step 3 from temp sensor and tell sequencer to finish
	ADCSequenceEnable(ADC0_BASE, 1);
	//-----

    GPIOPinConfigure(GPIO_PA0_U0RX); //configure PA0 as Rx
    GPIOPinConfigure(GPIO_PA1_U0TX); //configure PA1 as Tx
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1); //configure A0 and A1 as UART

    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200, // Configure UART speed 115200, 8bits, 1 stop bit, no parity
        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));

    while (1) //infinite loop
    {
		UARTCharPut(UART0_BASE, 'T'); //put these characters to serial port
		UARTCharPut(UART0_BASE, 'e');
		UARTCharPut(UART0_BASE, 'm');
		UARTCharPut(UART0_BASE, 'p');
		UARTCharPut(UART0_BASE, 'e');
		UARTCharPut(UART0_BASE, 'r');
		UARTCharPut(UART0_BASE, 'a');
		UARTCharPut(UART0_BASE, 't');
		UARTCharPut(UART0_BASE, 'u');
		UARTCharPut(UART0_BASE, 'r');
		UARTCharPut(UART0_BASE, 'e');
		UARTCharPut(UART0_BASE, ' ');
		UARTCharPut(UART0_BASE, '(');
		UARTCharPut(UART0_BASE, 'F');
		UARTCharPut(UART0_BASE, ')');
		UARTCharPut(UART0_BASE, ':');
		UARTCharPut(UART0_BASE, ' ');

		ADCIntClear(ADC0_BASE, 1);			//clear ADC0 interrupt
		ADCProcessorTrigger(ADC0_BASE, 1);	//Trigger ADC0 sequencer 1

		while(!ADCIntStatus(ADC0_BASE, 1, false))	//wait for ADC conversion to finish
		{
		}

		SysCtlDelay(6000000);

		ADCSequenceDataGet(ADC0_BASE, 1, ui32ADC0Value);						//get data from FIFO and put into array
		ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4; //calculate average temperature (+2/4 used for rounding)
		ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;			//calculate temp in Celsius
		ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;					//calculate temp in Fahrenheit

		//get hundreds, tens, and ones
		hundreds = ui32TempValueF / 100;
		tens = ui32TempValueF % 100 / 10;
		ones = ui32TempValueF % 100 % 10;

		//convert to ASCII numbers
		hundreds += 48;
		tens += 48;
		ones += 48;

		if(hundreds > '0')							//if hundreds place is zero, insert blank space to keep numbers alligned
			UARTCharPut(UART0_BASE, hundreds);
		else
			UARTCharPut(UART0_BASE, ' ');
		UARTCharPut(UART0_BASE, tens);				//send tens serially
		UARTCharPut(UART0_BASE, ones);				//send ones serially	
		UARTCharPut(UART0_BASE, '\n');				//new line
		UARTCharPut(UART0_BASE, '\r');				//carriage return
    }

}
