//video: http://screencast.com/t/1f7CCWK6RW

#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"

void IntGPIOF0(void);

int main(void)
{
	uint32_t ui32Period; //will store number to initialize counter

	//set the clock to run at 40MHz
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); //Enable port F

	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1| GPIO_PIN_2|GPIO_PIN_3); //Enable pins F1,F2,F3 as outputs
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0); //Enable PF0 as input

	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0); //Enable timer 0
	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC); //Configure timer 0 to periodic mode

	//get system clock, divide by desired blinking frequency, and divide by 2 because interrupt will happen twice per cycle
	ui32Period = (SysCtlClockGet() / 50) / 2; //will blink at 50 Hz
	TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period - 1); //load timer with value in ui32Period

	//Unlock Pin F0 to use an interrupt on SW2
	SYSCTL_RCGC2_R |= 0x00000020;     // 1) activate clock for Port F
	GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock GPIO Port F
	GPIO_PORTF_CR_R = 0x1F;           // allow changes to PF4-0
	// only PF0 needs to be unlocked, other bits can't be locked
	GPIO_PORTF_AMSEL_R = 0x00;        // 3) disable analog on PF
	GPIO_PORTF_PCTL_R = 0x00000000;   // 4) PCTL GPIO on PF4-0
	GPIO_PORTF_DIR_R = 0x0E;          // 5) PF4,PF0 in, PF3-1 out
	GPIO_PORTF_AFSEL_R = 0x00;        // 6) disable alt funct on PF7-0
	GPIO_PORTF_PUR_R = 0x11;          // enable pull-up on PF0 and PF4
	GPIO_PORTF_DEN_R = 0x1F;          // 7) enable digital I/O on PF4-0

	GPIOIntRegister(GPIO_PORTF_BASE, IntGPIOF0);					//register the interrupt handler for PF0
	GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_0, GPIO_FALLING_EDGE); //SW2 goes low when pressed
	GPIOIntEnable(GPIO_PORTF_BASE, GPIO_PIN_0);						//enable interrupts on PF0

	IntEnable(INT_TIMER0A); //Enable interrupts on timer 0
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT); //set timer 0 to interrupt at timeout
	IntMasterEnable(); //enable master interrupt

	TimerEnable(TIMER0_BASE, TIMER_A); //start the timer


	while(1) //infinite loop 
	{
	}
}

void Timer0IntHandler(void) //interrupt handler for timer 0
{
	//Clear the timer interrupt
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

	//Read the current state of the GPIO pin and
	//write back the opposite statee
	if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2))
	{
		//turn on pin
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
	}
	else
	{
		//turn off pin
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 4);
	}

}

void IntGPIOF0(void) //interrupt handler for GPIO pin F0
{
	GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0);							//clear interrupt flag on pin F0
	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 4); //turn ON blue LED
	SysCtlDelay(20000000); 												//keep LED on for 0.5 seconds
}
