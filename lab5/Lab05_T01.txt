//http://screencast.com/t/ifILqx96WXx

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"

int main(void)
{
	uint32_t ui32ADC0Value[4];			//will store 4 values from FIFO when using sequencer 1
	volatile uint32_t ui32TempAvg;		//stores average of 4 sampled values
	volatile uint32_t ui32TempValueC;	//stores temperature in Celsius
	volatile uint32_t ui32TempValueF;	//stores temperature in Fahrenheit

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ); //set clock to 40MHz

	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);	//Enable ADC0 

	ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);	//set sequencer 1 to trigger with CPU
	ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);			//configure step 0 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);			//configure sequencer step 1 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);			//configure sequencer step 2 from temp sensor
	ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END); //configure sequencer step 3 from temp sensor and tell sequencer to finish
	ADCSequenceEnable(ADC0_BASE, 1);								//enable sequencer

	while(1)	//loop forever
	{
	   ADCIntClear(ADC0_BASE, 1);			//clear ADC0 interrupt
	   ADCProcessorTrigger(ADC0_BASE, 1);	//Trigger ADC0 sequencer 1

	   while(!ADCIntStatus(ADC0_BASE, 1, false))	//wait for ADC conversion to finish
	   {
	   }

	   ADCSequenceDataGet(ADC0_BASE, 1, ui32ADC0Value);						//get data from FIFO and put into array
	   ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4; //calculate average temperature (+2/4 used for rounding)
	   ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;			//calculate temp in Celsius
	   ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;					//calculate temp in Fahrenheit
	}
}
