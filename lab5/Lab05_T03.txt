//http://screencast.com/t/x39BEd5RGc34

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/sysctl.h"
#include "driverlib/adc.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"

	uint32_t ui32ADC0Value[4];						//will store 4 samples of temperature
	volatile uint32_t ui32TempAvg;					//stores average temperature based on certain number of samples
	volatile uint32_t ui32TempValueC;				//stores temperature in celsius
	volatile uint32_t ui32TempValueF;				//stores temperature in fahrenheit

int main(void)
{
	uint32_t ui32Period;							//will be used for time delay

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ); //set clock to 40 MHz

	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);		//enable adc0 for temperature sensor
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);	//enable port f for LED
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);	//enable timer 0 for interrupts

	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC); 	//configure timer 0 periodic mode
	ui32Period = SysCtlClockGet()/ 2;					//get clock and divide by 2 for 50% DC
	TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period - 1);	//load value into timer 0

	ADCHardwareOversampleConfigure(ADC0_BASE, 64);		//configure hardware averaging of 64
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);	//configure PF1 as output

	ADCSequenceConfigure(ADC0_BASE, 2, ADC_TRIGGER_PROCESSOR, 0);	//configure ADC0 sequencer 2 to trigger with processor
	ADCSequenceStepConfigure(ADC0_BASE, 2, 0, ADC_CTL_TS);			//configure ADC0 sequencer 2 step 0
	ADCSequenceStepConfigure(ADC0_BASE, 2, 1, ADC_CTL_TS);			//configure ADC0 sequencer 2 step 1
	ADCSequenceStepConfigure(ADC0_BASE, 2, 2, ADC_CTL_TS);			//configure ADC0 sequencer 2 step 2
	ADCSequenceStepConfigure(ADC0_BASE,2,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END); //configure ADC0 sequencer 2 step 3
	ADCSequenceEnable(ADC0_BASE, 2);		//enable ADC0 sequencer 2

	IntEnable(INT_TIMER0A); //Enable interrupts on timer 0
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT); //set timer 0 to interrupt at timeout
	IntMasterEnable(); //enable master interrupt
	TimerEnable(TIMER0_BASE, TIMER_A); //start the timer

	while(1)	//infinite loop
	{
	}
}

void Timer0IntHandler(void)		//interrupt handler for timer 0
{
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);		//clear interrupt flag on timer 0
	ADCIntClear(ADC0_BASE, 2);					//clear interrupt flag on ADC0

	ADCProcessorTrigger(ADC0_BASE, 2);			//trigger ADC0 sequencer 2

	while(!ADCIntStatus(ADC0_BASE, 2, false))	//wait for ADC conversion to finish
	{
	}

	ADCSequenceDataGet(ADC0_BASE, 2, ui32ADC0Value);		//get 4 values from sequencer 2 FIFO into buffer
	ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4; //take average of 4 values
	ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10; //convert temperature to Celsius
	ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;			//conver temperature to Fahrenheit
	ui32TempValueF += 5; 									//calibrate Fahrenheit temperature to be displayed

	if(ui32TempValueF > 80)									//turn on LED on PF2 if temp is over 80 deg F.
	   GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 2);		//turn on LED if temp > 80 deg F
	else
	   GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);		//turn off LED if temp < 80 deg F
}
